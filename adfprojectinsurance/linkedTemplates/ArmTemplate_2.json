{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfprojectinsurance"
		},
		"EventTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/d9db9343-0431-434a-9454-c9ec815c2be2/resourceGroups/InsuranceProject/providers/Microsoft.Storage/storageAccounts/insurancedataset"
		},
		"TW Trigger_properties_pipeline_parameters_pstartdate": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowsstarttime"
		},
		"TW Trigger_properties_pipeline_parameters_penddate": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowsEndTime"
		},
		"trigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/d9db9343-0431-434a-9454-c9ec815c2be2/resourceGroups/InsuranceProject/providers/Microsoft.Storage/storageAccounts/insurancedataset"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DelimitedText13",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json5",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlow Activity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText11",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(EMPLOYEE_ID=='200') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK_ID_CURR as string,",
						"          NAME_CONTRACT_TYPE as string,",
						"          CODE_GENDER as string,",
						"          FLAG_OWN_CAR as string,",
						"          FLAG_OWN_REALTY as string,",
						"          CNT_CHILDREN as string,",
						"          AMT_INCOME_TOTAL as string,",
						"          AMT_CREDIT as string,",
						"          AMT_ANNUITY as string,",
						"          AMT_GOODS_PRICE as string,",
						"          NAME_TYPE_SUITE as string,",
						"          NAME_INCOME_TYPE as string,",
						"          NAME_EDUCATION_TYPE as string,",
						"          NAME_FAMILY_STATUS as string,",
						"          NAME_HOUSING_TYPE as string,",
						"          REGION_POPULATION_RELATIVE as string,",
						"          DAYS_BIRTH as string,",
						"          DAYS_EMPLOYED as string,",
						"          DAYS_REGISTRATION as string,",
						"          DAYS_ID_PUBLISH as string,",
						"          OWN_CAR_AGE as string,",
						"          FLAG_MOBIL as string,",
						"          FLAG_EMP_PHONE as string,",
						"          FLAG_WORK_PHONE as string,",
						"          FLAG_CONT_MOBILE as string,",
						"          FLAG_PHONE as string,",
						"          FLAG_EMAIL as string,",
						"          OCCUPATION_TYPE as string,",
						"          CNT_FAM_MEMBERS as string,",
						"          REGION_RATING_CLIENT as string,",
						"          REGION_RATING_CLIENT_W_CITY as string,",
						"          WEEKDAY_APPR_PROCESS_START as string,",
						"          HOUR_APPR_PROCESS_START as string,",
						"          REG_REGION_NOT_LIVE_REGION as string,",
						"          REG_REGION_NOT_WORK_REGION as string,",
						"          LIVE_REGION_NOT_WORK_REGION as string,",
						"          REG_CITY_NOT_LIVE_CITY as string,",
						"          REG_CITY_NOT_WORK_CITY as string,",
						"          LIVE_CITY_NOT_WORK_CITY as string,",
						"          ORGANIZATION_TYPE as string,",
						"          EXT_SOURCE_1 as string,",
						"          EXT_SOURCE_2 as string,",
						"          EXT_SOURCE_3 as string,",
						"          APARTMENTS_AVG as string,",
						"          BASEMENTAREA_AVG as string,",
						"          YEARS_BEGINEXPLUATATION_AVG as string,",
						"          YEARS_BUILD_AVG as string,",
						"          COMMONAREA_AVG as string,",
						"          ELEVATORS_AVG as string,",
						"          ENTRANCES_AVG as string,",
						"          FLOORSMAX_AVG as string,",
						"          FLOORSMIN_AVG as string,",
						"          LANDAREA_AVG as string,",
						"          LIVINGAPARTMENTS_AVG as string,",
						"          LIVINGAREA_AVG as string,",
						"          NONLIVINGAPARTMENTS_AVG as string,",
						"          NONLIVINGAREA_AVG as string,",
						"          APARTMENTS_MODE as string,",
						"          BASEMENTAREA_MODE as string,",
						"          YEARS_BEGINEXPLUATATION_MODE as string,",
						"          YEARS_BUILD_MODE as string,",
						"          COMMONAREA_MODE as string,",
						"          ELEVATORS_MODE as string,",
						"          ENTRANCES_MODE as string,",
						"          FLOORSMAX_MODE as string,",
						"          FLOORSMIN_MODE as string,",
						"          LANDAREA_MODE as string,",
						"          LIVINGAPARTMENTS_MODE as string,",
						"          LIVINGAREA_MODE as string,",
						"          NONLIVINGAPARTMENTS_MODE as string,",
						"          NONLIVINGAREA_MODE as string,",
						"          APARTMENTS_MEDI as string,",
						"          BASEMENTAREA_MEDI as string,",
						"          YEARS_BEGINEXPLUATATION_MEDI as string,",
						"          YEARS_BUILD_MEDI as string,",
						"          COMMONAREA_MEDI as string,",
						"          ELEVATORS_MEDI as string,",
						"          ENTRANCES_MEDI as string,",
						"          FLOORSMAX_MEDI as string,",
						"          FLOORSMIN_MEDI as string,",
						"          LANDAREA_MEDI as string,",
						"          LIVINGAPARTMENTS_MEDI as string,",
						"          LIVINGAREA_MEDI as string,",
						"          NONLIVINGAPARTMENTS_MEDI as string,",
						"          NONLIVINGAREA_MEDI as string,",
						"          FONDKAPREMONT_MODE as string,",
						"          HOUSETYPE_MODE as string,",
						"          TOTALAREA_MODE as string,",
						"          WALLSMATERIAL_MODE as string,",
						"          EMERGENCYSTATE_MODE as string,",
						"          OBS_30_CNT_SOCIAL_CIRCLE as string,",
						"          DEF_30_CNT_SOCIAL_CIRCLE as string,",
						"          OBS_60_CNT_SOCIAL_CIRCLE as string,",
						"          DEF_60_CNT_SOCIAL_CIRCLE as string,",
						"          DAYS_LAST_PHONE_CHANGE as string,",
						"          FLAG_DOCUMENT_2 as string,",
						"          FLAG_DOCUMENT_3 as string,",
						"          FLAG_DOCUMENT_4 as string,",
						"          FLAG_DOCUMENT_5 as string,",
						"          FLAG_DOCUMENT_6 as string,",
						"          FLAG_DOCUMENT_7 as string,",
						"          FLAG_DOCUMENT_8 as string,",
						"          FLAG_DOCUMENT_9 as string,",
						"          FLAG_DOCUMENT_10 as string,",
						"          FLAG_DOCUMENT_11 as string,",
						"          FLAG_DOCUMENT_12 as string,",
						"          FLAG_DOCUMENT_13 as string,",
						"          FLAG_DOCUMENT_14 as string,",
						"          FLAG_DOCUMENT_15 as string,",
						"          FLAG_DOCUMENT_16 as string,",
						"          FLAG_DOCUMENT_17 as string,",
						"          FLAG_DOCUMENT_18 as string,",
						"          FLAG_DOCUMENT_19 as string,",
						"          FLAG_DOCUMENT_20 as string,",
						"          FLAG_DOCUMENT_21 as string,",
						"          AMT_REQ_CREDIT_BUREAU_HOUR as string,",
						"          AMT_REQ_CREDIT_BUREAU_DAY as string,",
						"          AMT_REQ_CREDIT_BUREAU_WEEK as string,",
						"          AMT_REQ_CREDIT_BUREAU_MON as string,",
						"          AMT_REQ_CREDIT_BUREAU_QRT as string,",
						"          AMT_REQ_CREDIT_BUREAU_YEAR as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/joins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source1, source3 join(source1@CustomerID == source3@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK_ID_CURR as string,",
						"          NAME_CONTRACT_TYPE as string,",
						"          CODE_GENDER as string,",
						"          FLAG_OWN_CAR as string,",
						"          FLAG_OWN_REALTY as string,",
						"          CNT_CHILDREN as string,",
						"          AMT_INCOME_TOTAL as string,",
						"          AMT_CREDIT as string,",
						"          AMT_ANNUITY as string,",
						"          AMT_GOODS_PRICE as string,",
						"          NAME_TYPE_SUITE as string,",
						"          NAME_INCOME_TYPE as string,",
						"          NAME_EDUCATION_TYPE as string,",
						"          NAME_FAMILY_STATUS as string,",
						"          NAME_HOUSING_TYPE as string,",
						"          REGION_POPULATION_RELATIVE as string,",
						"          DAYS_BIRTH as string,",
						"          DAYS_EMPLOYED as string,",
						"          DAYS_REGISTRATION as string,",
						"          DAYS_ID_PUBLISH as string,",
						"          OWN_CAR_AGE as string,",
						"          FLAG_MOBIL as string,",
						"          FLAG_EMP_PHONE as string,",
						"          FLAG_WORK_PHONE as string,",
						"          FLAG_CONT_MOBILE as string,",
						"          FLAG_PHONE as string,",
						"          FLAG_EMAIL as string,",
						"          OCCUPATION_TYPE as string,",
						"          CNT_FAM_MEMBERS as string,",
						"          REGION_RATING_CLIENT as string,",
						"          REGION_RATING_CLIENT_W_CITY as string,",
						"          WEEKDAY_APPR_PROCESS_START as string,",
						"          HOUR_APPR_PROCESS_START as string,",
						"          REG_REGION_NOT_LIVE_REGION as string,",
						"          REG_REGION_NOT_WORK_REGION as string,",
						"          LIVE_REGION_NOT_WORK_REGION as string,",
						"          REG_CITY_NOT_LIVE_CITY as string,",
						"          REG_CITY_NOT_WORK_CITY as string,",
						"          LIVE_CITY_NOT_WORK_CITY as string,",
						"          ORGANIZATION_TYPE as string,",
						"          EXT_SOURCE_1 as string,",
						"          EXT_SOURCE_2 as string,",
						"          EXT_SOURCE_3 as string,",
						"          APARTMENTS_AVG as string,",
						"          BASEMENTAREA_AVG as string,",
						"          YEARS_BEGINEXPLUATATION_AVG as string,",
						"          YEARS_BUILD_AVG as string,",
						"          COMMONAREA_AVG as string,",
						"          ELEVATORS_AVG as string,",
						"          ENTRANCES_AVG as string,",
						"          FLOORSMAX_AVG as string,",
						"          FLOORSMIN_AVG as string,",
						"          LANDAREA_AVG as string,",
						"          LIVINGAPARTMENTS_AVG as string,",
						"          LIVINGAREA_AVG as string,",
						"          NONLIVINGAPARTMENTS_AVG as string,",
						"          NONLIVINGAREA_AVG as string,",
						"          APARTMENTS_MODE as string,",
						"          BASEMENTAREA_MODE as string,",
						"          YEARS_BEGINEXPLUATATION_MODE as string,",
						"          YEARS_BUILD_MODE as string,",
						"          COMMONAREA_MODE as string,",
						"          ELEVATORS_MODE as string,",
						"          ENTRANCES_MODE as string,",
						"          FLOORSMAX_MODE as string,",
						"          FLOORSMIN_MODE as string,",
						"          LANDAREA_MODE as string,",
						"          LIVINGAPARTMENTS_MODE as string,",
						"          LIVINGAREA_MODE as string,",
						"          NONLIVINGAPARTMENTS_MODE as string,",
						"          NONLIVINGAREA_MODE as string,",
						"          APARTMENTS_MEDI as string,",
						"          BASEMENTAREA_MEDI as string,",
						"          YEARS_BEGINEXPLUATATION_MEDI as string,",
						"          YEARS_BUILD_MEDI as string,",
						"          COMMONAREA_MEDI as string,",
						"          ELEVATORS_MEDI as string,",
						"          ENTRANCES_MEDI as string,",
						"          FLOORSMAX_MEDI as string,",
						"          FLOORSMIN_MEDI as string,",
						"          LANDAREA_MEDI as string,",
						"          LIVINGAPARTMENTS_MEDI as string,",
						"          LIVINGAREA_MEDI as string,",
						"          NONLIVINGAPARTMENTS_MEDI as string,",
						"          NONLIVINGAREA_MEDI as string,",
						"          FONDKAPREMONT_MODE as string,",
						"          HOUSETYPE_MODE as string,",
						"          TOTALAREA_MODE as string,",
						"          WALLSMATERIAL_MODE as string,",
						"          EMERGENCYSTATE_MODE as string,",
						"          OBS_30_CNT_SOCIAL_CIRCLE as string,",
						"          DEF_30_CNT_SOCIAL_CIRCLE as string,",
						"          OBS_60_CNT_SOCIAL_CIRCLE as string,",
						"          DEF_60_CNT_SOCIAL_CIRCLE as string,",
						"          DAYS_LAST_PHONE_CHANGE as string,",
						"          FLAG_DOCUMENT_2 as string,",
						"          FLAG_DOCUMENT_3 as string,",
						"          FLAG_DOCUMENT_4 as string,",
						"          FLAG_DOCUMENT_5 as string,",
						"          FLAG_DOCUMENT_6 as string,",
						"          FLAG_DOCUMENT_7 as string,",
						"          FLAG_DOCUMENT_8 as string,",
						"          FLAG_DOCUMENT_9 as string,",
						"          FLAG_DOCUMENT_10 as string,",
						"          FLAG_DOCUMENT_11 as string,",
						"          FLAG_DOCUMENT_12 as string,",
						"          FLAG_DOCUMENT_13 as string,",
						"          FLAG_DOCUMENT_14 as string,",
						"          FLAG_DOCUMENT_15 as string,",
						"          FLAG_DOCUMENT_16 as string,",
						"          FLAG_DOCUMENT_17 as string,",
						"          FLAG_DOCUMENT_18 as string,",
						"          FLAG_DOCUMENT_19 as string,",
						"          FLAG_DOCUMENT_20 as string,",
						"          FLAG_DOCUMENT_21 as string,",
						"          AMT_REQ_CREDIT_BUREAU_HOUR as string,",
						"          AMT_REQ_CREDIT_BUREAU_DAY as string,",
						"          AMT_REQ_CREDIT_BUREAU_WEEK as string,",
						"          AMT_REQ_CREDIT_BUREAU_MON as string,",
						"          AMT_REQ_CREDIT_BUREAU_QRT as string,",
						"          AMT_REQ_CREDIT_BUREAU_YEAR as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Flow Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlow Activity",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T05:05:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlow Activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joins dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "joins",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T05:30:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/joins')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "EventBasedTrigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Trigger Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Refresh2Minutes')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Trigger Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 2,
						"startTime": "2025-02-10T05:17:00",
						"endTime": "2025-02-11T05:17:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TW Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Tumbling Window",
						"type": "PipelineReference"
					},
					"parameters": {
						"pstartdate": "[parameters('TW Trigger_properties_pipeline_parameters_pstartdate')]",
						"penddate": "[parameters('TW Trigger_properties_pipeline_parameters_penddate')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2024-03-06T06:24:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "OnDelete",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger1_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": []
		}
	]
}